using System;

// mendefinisikan kemampuan robot
public interface IKemampuan
{
    int Cooldown { get; } // property yang mengembalikan waktu jeda pemakaian kemampuan
    void Gunakan(Robot pengguna, Robot target); // untuk menggunakan kemampuan yang menerima dua parameter yaitu robot pengguna dan target
}

// kelas abstrak yang mendefinisikan atribut umum untuk robot
public abstract class Robot
// Nama, energi, armor, Serangan adalah atribut dasar robot
{
    public string Nama { get; protected set; }
    private int energi;
    private int armor;
    public int Serangan { get; protected set; }

// Konstruktor menerima parameter untuk inisialisasi nama, energi, armor, dan serangan robot
    protected Robot(string nama, int energi, int armor, int serangan)
    {
        Nama = nama;
        this.energi = energi;
        this.armor = armor;
        Serangan = serangan;
    }

    // Metode untuk akses dan modifikasi energi. GetEnergi dan SetEnergi mengakses dan memodifikasi energi robot. Nilai energi tidak boleh kurang dari 0 (menggunakan Math.Max)
    public int GetEnergi() => energi;
    public void SetEnergi(int nilai) => energi = Math.Max(0, nilai);

    // sama seperti energi, armor juga memiliki akses dan modifikasi dengan batas minimum 0
    public int GetArmor() => armor;
    public void SetArmor(int nilai) => armor = Math.Max(0, nilai);

    // metode untuk menyerang robot lain. 
    public void Serang(Robot target)
    {
        // damage dihitung dengan rumus dibawah ini, hasilnya dikurangi dari energi target, lalu ditampilkan pesan serangan
        int damage = Math.Max(0, Serangan - target.GetArmor());
        target.SetEnergi(target.GetEnergi() - damage);
        Console.WriteLine($"{Nama} menyerang {target.Nama} dan mengurangi energinya sebesar {damage}.");
    }

    // metode untuk menggunakan kemampuan khusus
    public abstract void GunakanKemampuan(IKemampuan kemampuan, Robot target);

    // mencetak status robot seperti nama, energi, armor dan serangan
    public void CetakInformasi()
    {
        Console.WriteLine($"[Robot] {Nama} - Energi: {GetEnergi()}, Armor: {GetArmor()}, Serangan: {Serangan}");
    }
}

// Implementasi Bos Robot. BosRobot adalah turunan dari Robot 
public class BosRobot : Robot
{
    public BosRobot(string nama) : base(nama, 300, 30, 40) { }

    // menangani serangan terhadap bos. jika energi mencapai 0, metode Mati() dipanggil
    public void Diserang(Robot penyerang)
    {
        int damage = Math.Max(0, penyerang.Serangan - GetArmor());
        SetEnergi(GetEnergi() - damage);
        Console.WriteLine($"{penyerang.Nama} menyerang {Nama} dan mengurangi energi bos sebesar {damage}.");

        if (GetEnergi() <= 0) Mati();
    }

    // implementasi metode abstrak untuk menggunakan kemampuan khusus
    public override void GunakanKemampuan(IKemampuan kemampuan, Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan {kemampuan.GetType().Name}.");
        kemampuan.Gunakan(this, target);
    }

    // mencetak output bahwa bos telah dikalahkan
    private void Mati()
    {
        Console.WriteLine($"{Nama} telah dikalahkan!");
    }
}

// Robot Biasa sebagai turunan dari Robot
public class RobotBiasa : Robot
{
    public RobotBiasa(string nama) : base(nama, 100, 10, 20) { }

    // menggunakan kemampuan dnegan menampilkan pesan dan memanggil metode Gunakan
    public override void GunakanKemampuan(IKemampuan kemampuan, Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan {kemampuan.GetType().Name}.");
        kemampuan.Gunakan(this, target);
    }
}

// Repair untuk memulihkan 30 energi ke robot pengguna
public class Repair : IKemampuan
{
    // 2 giliran
    public int Cooldown => 2;

    public void Gunakan(Robot pengguna, Robot target)
    {
        pengguna.SetEnergi(pengguna.GetEnergi() + 30);
        Console.WriteLine($"{pengguna.Nama} memulihkan 30 energi.");
    }
}

// Kemampuan Electric Shock mengurangi energi target sebesar 15
public class ElectricShock : IKemampuan
{
    public int Cooldown => 3;

    public void Gunakan(Robot pengguna, Robot target)
    {
        target.SetEnergi(target.GetEnergi() - 15);
        Console.WriteLine($"{pengguna.Nama} memberikan kejutan listrik ke {target.Nama} dan mengurangi energinya sebesar 15.");
    }
}

// Kemampuan Plasma Cannon menembakkan serangan dengan damage 
+10 diatas serangan dasar
public class PlasmaCannon : IKemampuan
{
    public int Cooldown => 4;

    public void Gunakan(Robot pengguna, Robot target)
    {
        int damage = pengguna.Serangan + 10;
        target.SetEnergi(target.GetEnergi() - damage);
        Console.WriteLine($"{pengguna.Nama} menembakkan Plasma Cannon dan mengurangi energi {target.Nama} sebesar {damage}.");
    }
}

// Kemampuan Super Shield meningkatkan armor pengguna sebanyak 20
public class SuperShield : IKemampuan
{
    public int Cooldown => 5;

    public void Gunakan(Robot pengguna, Robot target)
    {
        pengguna.SetArmor(pengguna.GetArmor() + 20);
        Console.WriteLine($"{pengguna.Nama} meningkatkan armor sebesar 20.");
    }
}

// Program Utama
class Program
{
    static void Main(string[] args)
    {
        Robot robot1 = new RobotBiasa("Robot Alpha");
        Robot robot2 = new RobotBiasa("Robot Beta");
        BosRobot bos = new BosRobot("Bos Titan");

        IKemampuan repair = new Repair();
        IKemampuan electricShock = new ElectricShock();
        IKemampuan plasmaCannon = new PlasmaCannon();
        IKemampuan superShield = new SuperShield();

        robot1.CetakInformasi();
        robot2.CetakInformasi();
        bos.CetakInformasi();

        Console.WriteLine("\n--- Pertarungan Dimulai ---\n");

        robot1.Serang(bos);
        bos.Diserang(robot1);

        robot2.GunakanKemampuan(electricShock, bos);
        bos.Diserang(robot2);

        bos.GunakanKemampuan(superShield, bos);

        robot1.GunakanKemampuan(plasmaCannon, bos);
        bos.Diserang(robot1);

        Console.WriteLine("\n--- Akhir Giliran ---\n");

        
        robot1.SetEnergi(robot1.GetEnergi() + 10);
        robot2.SetEnergi(robot2.GetEnergi() + 10);
        bos.SetEnergi(bos.GetEnergi() + 20);

        robot1.CetakInformasi();
        robot2.CetakInformasi();
        bos.CetakInformasi();
    }
}
